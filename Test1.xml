
const { createBoard, dropPiece, checkWinner, board } = require('../game');

describe('Connect Four Game', () => {
  beforeEach(() => {
    // Reset the board before each test
    board.length = 0; // Clear the existing board
    createBoard();
  });

  test('should create an empty board', () => {
    expect(board.length).toBe(6); // 6 rows
    expect(board[0].length).toBe(7); // 7 columns
    expect(board[0][0]).toBe(0); // All positions should be 0 initially
  });

  test('should drop a piece into an empty column', () => {
    dropPiece(0, 1); // Player 1 drops a piece in column 0
    expect(board[5][0]).toBe(1); // The piece should land in the last row
  });

  test('should drop a piece into a non-empty column', () => {
    dropPiece(0, 1); // Player 1 drops a piece
    dropPiece(0, 2); // Player 2 drops a piece
    expect(board[5][0]).toBe(1); // Player 1's piece
    expect(board[4][0]).toBe(2); // Player 2's piece
  });

  test('should not drop a piece into a full column', () => {
    // Fill the column
    for (let i = 0; i < 6; i++) {
      dropPiece(0, 1); // Player 1 drops pieces in column 0
    }
    expect(dropPiece(0, 2)).toBe(false); // Column is full, so Player 2 cannot drop a piece
  });

  test('should detect a horizontal winner', () => {
    // Create a horizontal line of 4 for Player 1
    dropPiece(0, 1);
    dropPiece(1, 1);
    dropPiece(2, 1);
    dropPiece(3, 1);
    expect(checkWinner(1)).toBe(true); // Player 1 should win
  });

  test('should detect a vertical winner', () => {
    // Create a vertical line of 4 for Player 2
    dropPiece(0, 2);
    dropPiece(0, 2);
    dropPiece(0, 2);
    dropPiece(0, 2);
    expect(checkWinner(2)).toBe(true); // Player 2 should win
  });

  test('should detect a diagonal winner (top-left to bottom-right)', () => {
    // Create a diagonal line of 4 for Player 1
    dropPiece(0, 1);
    dropPiece(1, 1);
    dropPiece(1, 2);
    dropPiece(2, 1);
    dropPiece(2, 2);
    dropPiece(2, 3);
    dropPiece(3, 1);
    dropPiece(3, 2);
    dropPiece(3, 3);
    expect(checkWinner(1)).toBe(true); // Player 1 should win diagonally
  });

  test('should detect a diagonal winner (top-right to bottom-left)', () => {
    // Create a diagonal line of 4 for Player 2
    dropPiece(3, 2);
    dropPiece(2, 2);
    dropPiece(2, 3);
    dropPiece(1, 2);
    dropPiece(1, 3);
    dropPiece(1, 4);
    dropPiece(0, 2);
    dropPiece(0, 3);
    dropPiece(0, 4);
    expect(checkWinner(2)).toBe(true); // Player 2 should win diagonally
  });
});
